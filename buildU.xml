<?xml version="1.0" encoding="UTF-8"?>
<project name="UC4 DEMO" basedir="." description="Realizuje wykonanie buildu dla projektu UC4-DEMO" default="main">

    <property file="build/config/${build.host}.properties"/>
    <property name="logs">var/build/logs</property>
    <property name="cache_path">var/cache</property>

    <property name="supervisor.config.path" value="supervisor/${build.host}.conf"/>
    <property name="supervisor.pid.path" value="var/supervisor/${build.host}.pid"/>
    <property name="supervisor.daemon.bin" value="supervisord"/>
    <property name="supervisor.daemon.command" value="${supervisor.daemon.bin} --configuration ${supervisor.config.path}"/>
    <property name="phpunit.bin" value="vendor/bin/phpunit"/>
    <property name="phpcs.bin" value="vendor/bin/phpcs"/>

    <target name="main" description="Main deployment target">
        <echo msg="Updating environment: ${build.host}"/>
        <phingcall target="clear-cache"/>
        <phingcall target="tests"/>
        <phingcall target="check-coding-standards"/>
        <phingcall target="bower-update"/>
        <phingcall target="update-gems"/>
        <phingcall target="compile-css"/>
        <phingcall target="unity-doctrine-migrate"/>
        <phingcall target="unity-symlinks"/>
        <phingcall target="unity-chmod"/>
        <phingcall target="unity-crontab"/>
        <phingcall target="prepare-sphinx-configuration-files"/>
        <phingcall target="supervisor-reload"/>
        <if>
            <equals arg1="${application.type}" arg2="mc" />
            <then>
                <phingcall target="tmx-import"/>
                <phingcall target="tmx-export"/>
            </then>
        </if>
        <phingcall target="generate-build-info"/>
        <phingcall target="clear-cache"/>
        <phingcall target="cache-warmup"/>
    </target>

    <target name="update-dev" description="Developing deployment">
        <echo msg="Updating development environment: ${build.host}"/>
        <phingcall target="clear-cache"/>
        <phingcall target="tests"/>
        <phingcall target="bower-update"/>
        <phingcall target="update-gems"/>
        <phingcall target="compile-css"/>
        <phingcall target="unity-doctrine-migrate"/>
        <phingcall target="prepare-sphinx-configuration-files"/>
        <phingcall target="clear-cache"/>
        <phingcall target="generate-build-info"/>
    </target>

    <target name="bower-update" description="Bower update">
        <echo msg="bower prune"/>
        <exec command="bower prune" passthru="true" checkreturn="true"/>

        <echo msg="bower update"/>
        <exec command="bower update" passthru="true"  checkreturn="true"/>
    </target>

    <target name="unity-doctrine-migrate" description="Migrate database">
        <echo msg="php bin/doctrine-cli.php ${build.host} migrate"/>
        <exec command="php bin/doctrine-cli.php ${build.host} migrate"
              checkreturn="true" passthru="true" />
    </target>

    <target name="clear-cache" description="Clears application cache">
        <echo msg="rm -rf ${cache_path}/*"/>
        <exec command="rm -rf ${cache_path}/*" checkreturn="true"/>
        <echo msg="php bin/console ${build.host} cache:clear"/>
        <exec command="php bin/console ${build.host} cache:clear" passthru="true" checkreturn="true"/>
    </target>

    <target name="update-gems" description="Update gems">
        <echo msg="bundle install --path ./.bundle"/>
        <exec command="bundle install --path ./.bundle" passthru="true" checkreturn="true"/>
        <echo msg="bundle update"/>
        <exec command="bundle update" passthru="true" checkreturn="true"/>
    </target>

    <target name="compile-css" description="Compile CSS">
        <echo msg="Compiling old compass files..."/>
        <exec command="php bin/console ${build.host} tools:compass:compile ${compass.css.path} -e production" passthru="true" checkreturn="true"/>
        <echo msg="Updating node modules for RWD..." />
        <exec command="(cd ${project.basedir}/web/mc/front/core &amp;&amp; npm install)" passthru="true" checkreturn="true" />
        <echo msg="Compiling webpack..." />
        <exec command="(cd ${project.basedir}/web/mc/front/core &amp;&amp; npm run compile)" passthru="true" checkreturn="true" />
    </target>

    <target name="unity-symlinks" description="Generates vendor symlinks">
        <symlink target="${project.basedir}/${image.config.path}" link="${project.basedir}/var/configs/image.php" />
        <delete file="${project.basedir}/public/sitemap.xml" failonerror="false"/>
        <symlink link="${project.basedir}/public">
            <fileset dir="${project.basedir}/var/sitemap">
                <include name="sitemap.xml"/>
            </fileset>
        </symlink>
    </target>

    <target name="unity-chmod">
        <exec command="find var/ -type d -exec chmod 777 {} \; 2>/dev/null" passthru="true" />
        <exec command="find public/files/ -maxdepth 2 -type d -exec chmod 777 {} \; 2>/dev/null" passthru="true" />
    </target>

    <target name="unity-crontab" description="Configure access">
        <exec command="echo &quot;ENV_HOST=${build.host}&quot; > cron/current.crontab" passthru="true" />
        <exec command="echo &quot;NICE=\&quot;nice -n 10\&quot;&quot; >> cron/current.crontab" passthru="true" />
        <exec command="echo &quot;OLD_CONSOLE_PATH=`pwd`/bin/old_console.php&quot; >> cron/current.crontab" passthru="true" />
        <exec command="echo &quot;CONSOLE_PATH=`pwd`/bin/console&quot; >> cron/current.crontab" passthru="true" />
        <exec command="echo &quot;ROOT_PATH=`pwd`&quot; >> cron/current.crontab" passthru="true" />
        <exec command="(cat cron/${build.host}.crontab ; printf &quot;\n&quot; ; cat cron/main.crontab ; printf &quot;\n&quot;) >> cron/current.crontab" passthru="true" />
        <exec command="chmod 777 cron/current.crontab" passthru="true" checkreturn="true"/>
        <exec command="crontab cron/current.crontab" passthru="true" checkreturn="true"/>
    </target>

    <target name="cache-warmup">
        <exec command="wget ${build.host}  -qO- > /dev/null" passthru="true"/>
    </target>

    <target name="tmx-import" description="Tmx translation import (mc only)">
        <if>
            <not>
                <equals arg1="${application.type}" arg2="mc" />
            </not>
            <then>
                <fail>Tmx import is valid only for MC application!</fail>
            </then>
            <else>
                <exec command="php bin/console ${build.host} import:tmx:translations" passthru="true" checkreturn="true"/>
            </else>
        </if>
    </target>

    <target name="tmx-export" description="Tmx translation export (mc only)">
        <if>
            <not>
                <equals arg1="${application.type}" arg2="mc" />
            </not>
            <then>
                <fail>Tmx export is valid only for MC application!</fail>
            </then>
            <else>
                <exec command="php bin/console ${build.host} export:tmx:translations" passthru="true" checkreturn="true"/>
            </else>
        </if>
    </target>

    <target name="generate-build-info">
        <exec command="./gen_build_info.sh" />
    </target>

    <target name="supervisor-reload">
        <echo msg="stopping supervisor"/>
        <exec command="sh -c &quot;if [ -f ${supervisor.pid.path} ]; then PID=\`cat ${supervisor.pid.path}\`; kill \$PID; while kill -0 \$PID 2> /dev/null; do sleep 0.5; done fi&quot;"/>

        <echo msg="starting supervisor"/>
        <mkdir dir="var/logs/${build.host}/supervisor"/>
        <exec command="${supervisor.daemon.command}" checkreturn="true" passthru="true"/>
    </target>

    <target name="tests">
        <echo msg="Uruchamianie testow jednostkowych"/>
        <exec command="sh -c &quot;${phpunit.bin}&quot;" passthru="true" checkreturn="true"/>
    </target>

    <target name="check-coding-standards">
        <echo>Checking coding standards</echo>
        <exec command="sh -c &quot;${phpcs.bin} --warning-severity=0 --standard=phpcs.xml&quot;" passthru="true" checkreturn="true"/>
    </target>

    <target name="generate-coding-standards">
        <echo>Generating coding standards documentation into docs/standardy_kodowania.md</echo>
        <exec command="sh -c &quot;${phpcs.bin} --standard=phpcs.xml --generator=Markdown > docs/standardy_kodowania.md&quot;" passthru="true" checkreturn="true"/>
    </target>

    <target name="prepare-sphinx-configuration-files">
        <if>
            <and>
                <isset property="sphinx.config.path" />
                <isset property="sphinx.config.files" />
            </and>
            <then>
                <echo msg="Sphinx configuration files are processing"/>
                <foreach list="${sphinx.config.files}" param="sphinx.configuration" target="complement-sphinx-configuration-file" />
            </then>
            <else>
                <echo msg="Sphinx configuration is not declared in build properties, skip task"/>
            </else>
        </if>
    </target>

    <target name="complement-sphinx-configuration-file">
        <exec command="php bin/console ${build.host} sphinx:configuration:complement ${project.basedir}/${sphinx.config.path}/${sphinx.configuration}" passthru="true" checkreturn="true"/>
    </target>
</project>
